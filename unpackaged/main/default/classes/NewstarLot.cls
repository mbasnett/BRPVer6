/*
 * Constellation SFDC Integration API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the OAS code generator program.
 * https://github.com/OAS-api/OAS-codegen.git
 * Do not edit the class manually.
 */

/**
 * Represents a subdivision lot in NEWSTAR Sales.
 */
public class NewstarLot {
    /**
     * Unique ID of the lot.
     * @return id
     */
    public Integer id { get; set; }

    /**
     * ID of the subdivision in NEWSTAR Sales that the lot belongs to.
     * @return subdivisionId
     */
    public Integer subdivisionId { get; set; }

    /**
     * Actual lot number.
     * @return lotNumber
     */
    public String lotNumber { get; set; }

    /**
     * Actual civic address of the lot, if available.
     * @return address
     */
    public String address { get; set; }

    /**
     * City (municipality) where the lot is located.
     * @return city
     */
    public String city { get; set; }

    /**
     * List of models that can be built on the specified lot.
     * @return applicableModels
     */
    public List<NewstarLotModelRelationship> applicableModels { get; set; }

    /**
     * Current lot type.
     */
    public enum LotTypeEnum {
        REGULAR,
        SPEC,
        MODEL
    }

    /**
     * Current lot type.
     * @return lotType
     */
    public LotTypeEnum lotType { get; set; }

    /**
     * Current lot availability status.
     */
    public enum AvailabilityStatusEnum {
        UNKNOWN,
        OPEN,
        SOLD,
        OFFER,
        CLOSED
    }

    /**
     * Current lot availability status.
     * @return availabilityStatus
     */
    public AvailabilityStatusEnum availabilityStatus { get; set; }

    /**
     * Lot Price
     * @return basePrice
     */
    public Double basePrice { get; set; }

    /**
     * Lot Premium
     * @return premium
     */
    public Double premium { get; set; }

    /**
     * Base Model Price Override
     * @return baseModelPriceOverride
     */
    public Double baseModelPriceOverride { get; set; }

    /**
     * Whether the lot is Released for Sale
     * @return releasedForSale
     */
    public Boolean releasedForSale { get; set; }

    /**
     * Whether the lot is Released for Construction
     * @return releasedForConstruction
     */
    public Boolean releasedForConstruction { get; set; }

    /**
     * Release Date
     * @return releaseDate
     */
    public Datetime releaseDate { get; set; }

    /**
     * ID of the subdivision model pre-defined for this lot.
     * @return modelId
     */
    public Integer modelId { get; set; }

    /**
     * Total Options Amount for this Open Spec or Model lot.
     * @return totalOptionsAmount
     */
    public Double totalOptionsAmount { get; set; }

    public NewstarLot() {
        applicableModels = new List<NewstarLotModelRelationship>();
    }

   public static NewstarLot getExample() {
        NewstarLot lot = new NewstarLot();
          lot.id = 0;
          lot.subdivisionId = 0;
          lot.lotNumber = '';
          lot.address = '';
          lot.city = '';
          lot.applicableModels = new List<NewstarLotModelRelationship>{NewstarLotModelRelationship.getExample()};
          lot.lotType = LotTypeEnum.REGULAR;
          lot.availabilityStatus = AvailabilityStatusEnum.UNKNOWN;
          lot.basePrice = 1.3579;
          lot.premium = 1.3579;
          lot.baseModelPriceOverride = 1.3579;
          lot.releasedForSale = true;
          lot.releasedForConstruction = true;
          lot.releaseDate = Datetime.newInstanceGmt(2000, 1, 23, 4, 56, 7);
          lot.modelId = 0;
          lot.totalOptionsAmount = 1.3579;
        return lot;
    }

    public Boolean equals(Object obj) {
        if (obj instanceof NewstarLot) {           
            NewstarLot lot = (NewstarLot) obj;
            return this.id == lot.id
                && this.subdivisionId == lot.subdivisionId
                && this.lotNumber == lot.lotNumber
                && this.address == lot.address
                && this.city == lot.city
                && this.applicableModels == lot.applicableModels
                && this.lotType == lot.lotType
                && this.availabilityStatus == lot.availabilityStatus
                && this.basePrice == lot.basePrice
                && this.premium == lot.premium
                && this.baseModelPriceOverride == lot.baseModelPriceOverride
                && this.releasedForSale == lot.releasedForSale
                && this.releasedForConstruction == lot.releasedForConstruction
                && this.releaseDate == lot.releaseDate
                && this.modelId == lot.modelId
                && this.totalOptionsAmount == lot.totalOptionsAmount;
        }
        return false;
    }

    public Integer hashCode() {
        Integer hashCode = 43;
        hashCode = (17 * hashCode) + (id == null ? 0 : System.hashCode(id));
        hashCode = (17 * hashCode) + (subdivisionId == null ? 0 : System.hashCode(subdivisionId));
        hashCode = (17 * hashCode) + (lotNumber == null ? 0 : System.hashCode(lotNumber));
        hashCode = (17 * hashCode) + (address == null ? 0 : System.hashCode(address));
        hashCode = (17 * hashCode) + (city == null ? 0 : System.hashCode(city));
        hashCode = (17 * hashCode) + (applicableModels == null ? 0 : System.hashCode(applicableModels));
        hashCode = (17 * hashCode) + (lotType == null ? 0 : System.hashCode(lotType));
        hashCode = (17 * hashCode) + (availabilityStatus == null ? 0 : System.hashCode(availabilityStatus));
        hashCode = (17 * hashCode) + (basePrice == null ? 0 : System.hashCode(basePrice));
        hashCode = (17 * hashCode) + (premium == null ? 0 : System.hashCode(premium));
        hashCode = (17 * hashCode) + (baseModelPriceOverride == null ? 0 : System.hashCode(baseModelPriceOverride));
        hashCode = (17 * hashCode) + (releasedForSale == null ? 0 : System.hashCode(releasedForSale));
        hashCode = (17 * hashCode) + (releasedForConstruction == null ? 0 : System.hashCode(releasedForConstruction));
        hashCode = (17 * hashCode) + (releaseDate == null ? 0 : System.hashCode(releaseDate));
        hashCode = (17 * hashCode) + (modelId == null ? 0 : System.hashCode(modelId));
        hashCode = (17 * hashCode) + (totalOptionsAmount == null ? 0 : System.hashCode(totalOptionsAmount));
        return hashCode;
    }
}
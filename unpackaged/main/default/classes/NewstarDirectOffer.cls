/*
 * Constellation SFDC Integration API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the OAS code generator program.
 * https://github.com/OAS-api/OAS-codegen.git
 * Do not edit the class manually.
 */

/**
 * Represents a customer direct offer in NEWSTAR Sales.
 */
public class NewstarDirectOffer {
    /**
     * Unique ID of the direct offer in NEWSTAR Sales.
     * @return id
     */
    public Integer id { get; set; }

    /**
     * Get customer
     * @return customer
     */
    public NewstarCustomer customer { get; set; }

    /**
     * CoBuyers for whom the direct offer is made for.
     * @return coBuyers
     */
    public List<NewstarCoBuyer> coBuyers { get; set; }

    /**
     * ID of the subdivision to direct offer the lot in.
     * @return subdivisionId
     */
    public Integer subdivisionId { get; set; }

    /**
     * ID of the model to pre-select on the direct offered lot.
     * @return modelId
     */
    public Integer modelId { get; set; }

    /**
     * ID of the lot to direct offer in the specified subdivision.
     * @return lotId
     */
    public Integer lotId { get; set; }

    /**
     * Orientation of the direct offered model on the lot (swing).
     */
    public enum SwingEnum {
        UNSET,
        LEFT,
        RIGHT
    }

    /**
     * Orientation of the direct offered model on the lot (swing).
     * @return swing
     */
    public SwingEnum swing { get; set; }

    /**
     * ID of the NEWSTAR Sales user to associate the prospect with.
     * @return salesAgentId
     */
    public Integer salesAgentId { get; set; }

    /**
     * List of contigency conditions associated with direct offer.
     * @return contingencies
     */
    public List<NewstarContingency> contingencies { get; set; }

    /**
     * ID of the real estate agent optionally associated with this deal.
     * @return realEstateAgentId
     */
    public Integer realEstateAgentId { get; set; }

    /**
     * Selection Date associated with this deal.
     * @return selectionDate
     */
    public Datetime selectionDate { get; set; }

    /**
     * Target Closing Date associated with this deal.
     * @return closingTargetDate
     */
    public Datetime closingTargetDate { get; set; }

    /**
     * Closing Type associated with this deal.
     * @return closingType
     */
    public String closingType { get; set; }

    /**
     * ID of the entity in Salesforce.
     * @return externalId
     */
    public String externalId { get; set; }

    public NewstarDirectOffer() {
        coBuyers = new List<NewstarCoBuyer>();
        contingencies = new List<NewstarContingency>();
    }

   public static NewstarDirectOffer getExample() {
        NewstarDirectOffer directOffer = new NewstarDirectOffer();
          directOffer.id = 0;
          directOffer.customer = NewstarCustomer.getExample();
          directOffer.coBuyers = new List<NewstarCoBuyer>{NewstarCoBuyer.getExample()};
          directOffer.subdivisionId = 0;
          directOffer.modelId = 0;
          directOffer.lotId = 0;
          directOffer.swing = SwingEnum.UNSET;
          directOffer.salesAgentId = 0;
          directOffer.contingencies = new List<NewstarContingency>{NewstarContingency.getExample()};
          directOffer.realEstateAgentId = 0;
          directOffer.selectionDate = Datetime.newInstanceGmt(2000, 1, 23, 4, 56, 7);
          directOffer.closingTargetDate = Datetime.newInstanceGmt(2000, 1, 23, 4, 56, 7);
          directOffer.closingType = '';
          directOffer.externalId = '';
        return directOffer;
    }

    public Boolean equals(Object obj) {
        if (obj instanceof NewstarDirectOffer) {           
            NewstarDirectOffer directOffer = (NewstarDirectOffer) obj;
            return this.id == directOffer.id
                && this.customer == directOffer.customer
                && this.coBuyers == directOffer.coBuyers
                && this.subdivisionId == directOffer.subdivisionId
                && this.modelId == directOffer.modelId
                && this.lotId == directOffer.lotId
                && this.swing == directOffer.swing
                && this.salesAgentId == directOffer.salesAgentId
                && this.contingencies == directOffer.contingencies
                && this.realEstateAgentId == directOffer.realEstateAgentId
                && this.selectionDate == directOffer.selectionDate
                && this.closingTargetDate == directOffer.closingTargetDate
                && this.closingType == directOffer.closingType
                && this.externalId == directOffer.externalId;
        }
        return false;
    }

    public Integer hashCode() {
        Integer hashCode = 43;
        hashCode = (17 * hashCode) + (id == null ? 0 : System.hashCode(id));
        hashCode = (17 * hashCode) + (customer == null ? 0 : System.hashCode(customer));
        hashCode = (17 * hashCode) + (coBuyers == null ? 0 : System.hashCode(coBuyers));
        hashCode = (17 * hashCode) + (subdivisionId == null ? 0 : System.hashCode(subdivisionId));
        hashCode = (17 * hashCode) + (modelId == null ? 0 : System.hashCode(modelId));
        hashCode = (17 * hashCode) + (lotId == null ? 0 : System.hashCode(lotId));
        hashCode = (17 * hashCode) + (swing == null ? 0 : System.hashCode(swing));
        hashCode = (17 * hashCode) + (salesAgentId == null ? 0 : System.hashCode(salesAgentId));
        hashCode = (17 * hashCode) + (contingencies == null ? 0 : System.hashCode(contingencies));
        hashCode = (17 * hashCode) + (realEstateAgentId == null ? 0 : System.hashCode(realEstateAgentId));
        hashCode = (17 * hashCode) + (selectionDate == null ? 0 : System.hashCode(selectionDate));
        hashCode = (17 * hashCode) + (closingTargetDate == null ? 0 : System.hashCode(closingTargetDate));
        hashCode = (17 * hashCode) + (closingType == null ? 0 : System.hashCode(closingType));
        hashCode = (17 * hashCode) + (externalId == null ? 0 : System.hashCode(externalId));
        return hashCode;
    }
}
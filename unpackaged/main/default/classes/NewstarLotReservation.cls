/*
 * Constellation SFDC Integration API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the OAS code generator program.
 * https://github.com/OAS-api/OAS-codegen.git
 * Do not edit the class manually.
 */

/**
 * Represents a customer lot reservation in NEWSTAR Sales.
 */
public class NewstarLotReservation {
    /**
     * Unique ID of the lot reservation in NEWSTAR Sales.
     * @return id
     */
    public Integer id { get; set; }

    /**
     * Get customer
     * @return customer
     */
    public NewstarCustomer customer { get; set; }

    /**
     * CoBuyers for whom the lot reservation is made for.
     * @return coBuyers
     */
    public List<NewstarCoBuyer> coBuyers { get; set; }

    /**
     * ID of the subdivision to reserve the lot in.
     * @return subdivisionId
     */
    public Integer subdivisionId { get; set; }

    /**
     * ID of the model to pre-select on the reserved lot.
     * @return modelId
     */
    public Integer modelId { get; set; }

    /**
     * ID of the lot to reserve in the specified subdivision.
     * @return lotId
     */
    public Integer lotId { get; set; }

    /**
     * Orientation of the reserved model on the lot (swing).
     */
    public enum SwingEnum {
        UNSET,
        LEFT,
        RIGHT
    }

    /**
     * Orientation of the reserved model on the lot (swing).
     * @return swing
     */
    public SwingEnum swing { get; set; }

    /**
     * ID of the NEWSTAR Sales user to associate the prospect with.
     * @return salesAgentId
     */
    public Integer salesAgentId { get; set; }

    /**
     * The number of days before the lot reservation expires.
     * @return holdPeriodInDays
     */
    public Integer holdPeriodInDays { get; set; }

    /**
     * List of contigency conditions associated with reservation.
     * @return contingencies
     */
    public List<NewstarContingency> contingencies { get; set; }

    /**
     * ID of the real estate agent optionally associated with this deal.
     * @return realEstateAgentId
     */
    public Integer realEstateAgentId { get; set; }

    /**
     * ID of the entity in Salesforce.
     * @return externalId
     */
    public String externalId { get; set; }

    public NewstarLotReservation() {
        coBuyers = new List<NewstarCoBuyer>();
        contingencies = new List<NewstarContingency>();
    }

   public static NewstarLotReservation getExample() {
        NewstarLotReservation lotReservation = new NewstarLotReservation();
          lotReservation.id = 0;
          lotReservation.customer = NewstarCustomer.getExample();
          lotReservation.coBuyers = new List<NewstarCoBuyer>{NewstarCoBuyer.getExample()};
          lotReservation.subdivisionId = 0;
          lotReservation.modelId = 0;
          lotReservation.lotId = 0;
          lotReservation.swing = SwingEnum.UNSET;
          lotReservation.salesAgentId = 0;
          lotReservation.holdPeriodInDays = 0;
          lotReservation.contingencies = new List<NewstarContingency>{NewstarContingency.getExample()};
          lotReservation.realEstateAgentId = 0;
          lotReservation.externalId = '';
        return lotReservation;
    }

    public Boolean equals(Object obj) {
        if (obj instanceof NewstarLotReservation) {           
            NewstarLotReservation lotReservation = (NewstarLotReservation) obj;
            return this.id == lotReservation.id
                && this.customer == lotReservation.customer
                && this.coBuyers == lotReservation.coBuyers
                && this.subdivisionId == lotReservation.subdivisionId
                && this.modelId == lotReservation.modelId
                && this.lotId == lotReservation.lotId
                && this.swing == lotReservation.swing
                && this.salesAgentId == lotReservation.salesAgentId
                && this.holdPeriodInDays == lotReservation.holdPeriodInDays
                && this.contingencies == lotReservation.contingencies
                && this.realEstateAgentId == lotReservation.realEstateAgentId
                && this.externalId == lotReservation.externalId;
        }
        return false;
    }

    public Integer hashCode() {
        Integer hashCode = 43;
        hashCode = (17 * hashCode) + (id == null ? 0 : System.hashCode(id));
        hashCode = (17 * hashCode) + (customer == null ? 0 : System.hashCode(customer));
        hashCode = (17 * hashCode) + (coBuyers == null ? 0 : System.hashCode(coBuyers));
        hashCode = (17 * hashCode) + (subdivisionId == null ? 0 : System.hashCode(subdivisionId));
        hashCode = (17 * hashCode) + (modelId == null ? 0 : System.hashCode(modelId));
        hashCode = (17 * hashCode) + (lotId == null ? 0 : System.hashCode(lotId));
        hashCode = (17 * hashCode) + (swing == null ? 0 : System.hashCode(swing));
        hashCode = (17 * hashCode) + (salesAgentId == null ? 0 : System.hashCode(salesAgentId));
        hashCode = (17 * hashCode) + (holdPeriodInDays == null ? 0 : System.hashCode(holdPeriodInDays));
        hashCode = (17 * hashCode) + (contingencies == null ? 0 : System.hashCode(contingencies));
        hashCode = (17 * hashCode) + (realEstateAgentId == null ? 0 : System.hashCode(realEstateAgentId));
        hashCode = (17 * hashCode) + (externalId == null ? 0 : System.hashCode(externalId));
        return hashCode;
    }
}
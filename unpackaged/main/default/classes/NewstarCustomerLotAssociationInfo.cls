/*
 * Constellation SFDC Integration API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the OAS code generator program.
 * https://github.com/OAS-api/OAS-codegen.git
 * Do not edit the class manually.
 */

/**
 * Represents an association between a customer record and a lot in a NEWSTAR Sales subdivision (referred to as &quot;selection&quot;).\r\nThe association may indicate a lot reservation, contract in progress, closed deal, etc.
 */
public class NewstarCustomerLotAssociationInfo {
    /**
     * Internal ID of the lot association (selection).
     * @return id
     */
    public Integer id { get; set; }

    /**
     * ID of the customer that the lot association belongs to.
     * @return customerId
     */
    public Integer customerId { get; set; }

    /**
     * ID of the subdivision where the associated lot resides.
     * @return subdivisionId
     */
    public Integer subdivisionId { get; set; }

    /**
     * ID of the lot.
     * @return lotId
     */
    public Integer lotId { get; set; }

    /**
     * Orientation of the reserved model on the lot (swing).
     * @return swing
     */
    public String swing { get; set; }

    /**
     * ID of the model reserved/purchased by the customer on the lot.
     * @return modelId
     */
    public Integer modelId { get; set; }

    /**
     * Lot reservation date.
     * @return reservationDate
     */
    public Datetime reservationDate { get; set; }

    /**
     * Lot reservation expiration date.
     * @return reservationExpirationDate
     */
    public Datetime reservationExpirationDate { get; set; }

    /**
     * Contract submisssion date.
     * @return contractSubmissionDate
     */
    public Datetime contractSubmissionDate { get; set; }

    /**
     * Contract approval date.
     * @return contractApprovalDate
     */
    public Datetime contractApprovalDate { get; set; }

    /**
     * Actual closing date.
     * @return actualClosingDate
     */
    public Datetime actualClosingDate { get; set; }

    /**
     * Contract cancellation date.
     * @return cancellationDate
     */
    public Datetime cancellationDate { get; set; }

    /**
     * Flag indicating if the lot association record is in the contract ready state
     * @return isContractReady
     */
    public Boolean isContractReady { get; set; }

    /**
     * List of contigency conditions associated with reservation.
     * @return contingencies
     */
    public List<NewstarContingency> contingencies { get; set; }

    /**
     * List of CoBuyers associated with reservation.
     * @return coBuyers
     */
    public List<NewstarCoBuyer> coBuyers { get; set; }

    /**
     * Current status of the customer/lot association based on the sales lifecycle "stage" determined\r\nby NEWSTAR Sales events and actions.
     */
    public enum StatusEnum {
        UNKNOWN,
        SELECTION,
        RESERVED,
        CONTRACTREADY,
        PENDINGOFFER,
        UNDERCONTRACT,
        CANCELLED,
        CLOSED
    }

    /**
     * Current status of the customer/lot association based on the sales lifecycle "stage" determined\r\nby NEWSTAR Sales events and actions.
     * @return status
     */
    public StatusEnum status { get; private set; }

    public NewstarCustomerLotAssociationInfo() {
        contingencies = new List<NewstarContingency>();
        coBuyers = new List<NewstarCoBuyer>();
    }

   public static NewstarCustomerLotAssociationInfo getExample() {
        NewstarCustomerLotAssociationInfo customerLotAssociationInfo = new NewstarCustomerLotAssociationInfo();
          customerLotAssociationInfo.id = 0;
          customerLotAssociationInfo.customerId = 0;
          customerLotAssociationInfo.subdivisionId = 0;
          customerLotAssociationInfo.lotId = 0;
          customerLotAssociationInfo.swing = '';
          customerLotAssociationInfo.modelId = 0;
          customerLotAssociationInfo.reservationDate = Datetime.newInstanceGmt(2000, 1, 23, 4, 56, 7);
          customerLotAssociationInfo.reservationExpirationDate = Datetime.newInstanceGmt(2000, 1, 23, 4, 56, 7);
          customerLotAssociationInfo.contractSubmissionDate = Datetime.newInstanceGmt(2000, 1, 23, 4, 56, 7);
          customerLotAssociationInfo.contractApprovalDate = Datetime.newInstanceGmt(2000, 1, 23, 4, 56, 7);
          customerLotAssociationInfo.actualClosingDate = Datetime.newInstanceGmt(2000, 1, 23, 4, 56, 7);
          customerLotAssociationInfo.cancellationDate = Datetime.newInstanceGmt(2000, 1, 23, 4, 56, 7);
          customerLotAssociationInfo.isContractReady = true;
          customerLotAssociationInfo.contingencies = new List<NewstarContingency>{NewstarContingency.getExample()};
          customerLotAssociationInfo.coBuyers = new List<NewstarCoBuyer>{NewstarCoBuyer.getExample()};
          customerLotAssociationInfo.status = StatusEnum.UNKNOWN;
        return customerLotAssociationInfo;
    }

    public Boolean equals(Object obj) {
        if (obj instanceof NewstarCustomerLotAssociationInfo) {           
            NewstarCustomerLotAssociationInfo customerLotAssociationInfo = (NewstarCustomerLotAssociationInfo) obj;
            return this.id == customerLotAssociationInfo.id
                && this.customerId == customerLotAssociationInfo.customerId
                && this.subdivisionId == customerLotAssociationInfo.subdivisionId
                && this.lotId == customerLotAssociationInfo.lotId
                && this.swing == customerLotAssociationInfo.swing
                && this.modelId == customerLotAssociationInfo.modelId
                && this.reservationDate == customerLotAssociationInfo.reservationDate
                && this.reservationExpirationDate == customerLotAssociationInfo.reservationExpirationDate
                && this.contractSubmissionDate == customerLotAssociationInfo.contractSubmissionDate
                && this.contractApprovalDate == customerLotAssociationInfo.contractApprovalDate
                && this.actualClosingDate == customerLotAssociationInfo.actualClosingDate
                && this.cancellationDate == customerLotAssociationInfo.cancellationDate
                && this.isContractReady == customerLotAssociationInfo.isContractReady
                && this.contingencies == customerLotAssociationInfo.contingencies
                && this.coBuyers == customerLotAssociationInfo.coBuyers
                && this.status == customerLotAssociationInfo.status;
        }
        return false;
    }

    public Integer hashCode() {
        Integer hashCode = 43;
        hashCode = (17 * hashCode) + (id == null ? 0 : System.hashCode(id));
        hashCode = (17 * hashCode) + (customerId == null ? 0 : System.hashCode(customerId));
        hashCode = (17 * hashCode) + (subdivisionId == null ? 0 : System.hashCode(subdivisionId));
        hashCode = (17 * hashCode) + (lotId == null ? 0 : System.hashCode(lotId));
        hashCode = (17 * hashCode) + (swing == null ? 0 : System.hashCode(swing));
        hashCode = (17 * hashCode) + (modelId == null ? 0 : System.hashCode(modelId));
        hashCode = (17 * hashCode) + (reservationDate == null ? 0 : System.hashCode(reservationDate));
        hashCode = (17 * hashCode) + (reservationExpirationDate == null ? 0 : System.hashCode(reservationExpirationDate));
        hashCode = (17 * hashCode) + (contractSubmissionDate == null ? 0 : System.hashCode(contractSubmissionDate));
        hashCode = (17 * hashCode) + (contractApprovalDate == null ? 0 : System.hashCode(contractApprovalDate));
        hashCode = (17 * hashCode) + (actualClosingDate == null ? 0 : System.hashCode(actualClosingDate));
        hashCode = (17 * hashCode) + (cancellationDate == null ? 0 : System.hashCode(cancellationDate));
        hashCode = (17 * hashCode) + (isContractReady == null ? 0 : System.hashCode(isContractReady));
        hashCode = (17 * hashCode) + (contingencies == null ? 0 : System.hashCode(contingencies));
        hashCode = (17 * hashCode) + (coBuyers == null ? 0 : System.hashCode(coBuyers));
        hashCode = (17 * hashCode) + (status == null ? 0 : System.hashCode(status));
        return hashCode;
    }
}